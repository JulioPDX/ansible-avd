tenants:
  description: List of tenants, to define network services; L3 VRFs and L2 VLANS.
  type: list
  elements: dict
  options:
    name:
      type: str
      required: true
      unique: true
      description: |-
        Specify a tenant name.
        Tenant provide a construct to group L3 VRFs and L2 VLANs.
        Networks services can be filtered by tenant name.

    mac_vrf_vni_base:
      type: int
      required: true
      choices:
        - < 10000-16770000 >
      description: |-
        VXLAN Network Identifier for MAC VRF
        VXLAN VNI is derived from the base number with simple addition.
        e.g. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 = VNI 10300.

    vlan_aware_bundle_number_base:
      type: int
      default: 0
      description: |-
        Base number for vlan_aware_bundle
        The "Assigned Number" part of RD/RT is derived from vrf_vni + vlan_aware_bundle_number_base.

    enable_mlag_ibgp_peering_vrfs:
      type: bool
      default: true
      description: |-
        MLAG IBGP peering per VRF
        By default an IBGP peering is configured per VRF between MLAG peers on separate VLANs.
        Setting enable_mlag_ibgp_peering_vrfs: false under tenant will change this default to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
        This setting can be overridden per VRF.

    vrfs:
      type: list
      elements: dict
      description: Define L3 network services organized by vrf.
      options:
        name:
          type: str
          description: VRF name
          required: true
          unique: true

        vrf_vni:
          type: int
          description: |-
            VRF VNI - required if vrf_id is not set
            The VRF VNI range is not limited, but it is recommended to keep vrf_vni <= 1024
            It is necessary to keep [ vrf_vni + MLAG IBGP base_vlan ] < 4094 to support MLAG IBGP peering in VRF.
            If vrf_vni > 1094 make sure to change mlag_ibgp_peering_vrfs: { base_vlan: < > } to a lower value (default 3000).
            If vrf_vni > 10000 make sure to adjust mac_vrf_vni_base accordingly to avoid overlap.
          default: < vrf_id >

        ip_helpers:
          description: IP Helpers for DHCP relay
          type: list
          elements: dict
          options:
            name:
              required: true
              unique: true
              type: str
              description: DNS Name or IP address
            source_interface:
              type: str
              description: Source interface name
            source_vrf:
              type: str
              description: VRF to originate DHCP relay packets to DHCP server

        enable_mlag_ibgp_peering_vrfs:
          type: bool
          default: true
          description: |-
            MLAG IBGP peering per VRF
            By default an IBGP peering is configured per VRF between MLAG peers on separate VLANs.
            Setting enable_mlag_ibgp_peering_vrfs: false under vrf will change this default and/or override the tenant-wide setting

        mlag_ibgp_peering_vlan:
          type: int
          description: |-
            Manually define the VLAN used on the MLAG pair for the iBGP session.
            By default this parameter is calculated using the following formula: <base_vlan> + <vrf_vni> - 1
          choices:
            - < 1-4094 >

        vtep_diagnostic:
          description: |-
            Enable VTEP Network diagnostics
            This will create a loopback with virtual source-nat enable to perform diagnostics from the switch.
          type: dict
          options:
            loopback:
              type: int
              required: true
              description: Loopback interface number
              choices:
                - < 2-2100 >

            loopback_ip_range:
              type: str
              description: |-
                Loopback ip range, a unique ip is derived from this ranged and assigned
                to each l3 leaf based on it's unique id. Loopback is not created unless either loopback_ip_range or loopback_ip_pools are set.
              choices:
                - < IPv4_address/Mask >

            loopback_ip_pools:
              type: list
              elements: dict
              description: |-
                For inventories with multiple PODs a loopback range can be set per POD to avoid overlaps.
                This only takes effect when loopback_ip_range is not defined. Loopback is not created unless either loopback_ip_range or loopback_ip_pools are set.
              options:
                pod:
                  type: str
                  description: Name matching "pod_name"
                  required: true
                ipv4_pool: 
                  type: str
                  choices:
                    - < IPv4_address/Mask >
                  required: true

        svis:
          description: |-
            Dictionary of SVIs
            This will create both the L3 SVI and L2 VLAN based on filters applied to l3leaf and l2leaf.
          type: list
          elements: dict
          required: true
          options:
            id:
              type: int
              required: true
              unique: true
              description: SVI interface id and VLAN id
              choices:
                - < 1-4096 >

            vni_override:
              type: int
              description: |-
                By default the vni will be derived from "mac_vrf_vni_base"
                The vni_override allows us to override this value and statically define it.
              choices:
               - < 1-16777215 >

            profile:
              type: str
              description:
                Name of SVI profile to apply
                If variables are configured in profile AND SVI, SVI information will overwrite profile.

            name:
              required: true
              type: str
              description: Vlan name

            description:
              type: str
              default: < vlan_name >

            tags:
              type: list
              elements: str
              required: true
              description: Tags leveraged for networks services filtering.

            enabled:
              description: Enable or disable SVI interface
              type: bool
              default: false

            igmp_snooping_enabled:
              type: bool
              description: Enable IGMP Snooping ("on" by default in EOS)

            ip_address_virtual:
              type: str
              choices:
                - < IPv4_address/Mask >
              description: |-
                ip address virtual to configure VXLAN Anycast IP address
                Conserves IP addresses in VXLAN deployments as it doesn't require unique IP addresses on each node.

            ip_address_virtual_secondaries:
              type: list
              elements: string
              choices:
                - < IPv4_address/Mask >

            ip_virtual_router_addresses:
              type: list
              elements: string
              description: |-
                ip virtual-router address
                note, also requires an IP address to be configured on the SVI where it is applied.
              choices:
                - < IPv4_address >
                - < IPv4_address/Mask >

            ip_helpers:
              description: IP Helpers for DHCP relay
              type: list
              elements: dict
              options:
                name:
                  required: true
                  unique: true
                  type: str
                  description: DNS Name or IP address
                source_interface:
                  type: str
                  description: Source interface name
                source_vrf:
                  type: str
                  description: VRF to originate DHCP relay packets to DHCP server.

            vxlan:
              type: bool
              default: true
              description: Extend this SVI over VXLAN

            nodes:
              description: Define node specific configuration, such as unique IP addresses.
              type: list
              elements: dict
              options:
                name:
                  description: Hostname of node
                  type: str
                  required: true

                ip_address:
                  description: device unique IP address for node.
                  type: str
                  choices: < IPv4_address/Mask >
                
                raw_eos_cli:
                  type: str
                  description:
                    EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                    Overrides the setting on SVI level. Supports Multiline strings

                structured_config:
                  description: |-
                    Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen
                    Overrides the setting on SVI level.
                  type: any

            mtu:
              description: Interface MTU
              type: int

            raw_eos_cli:
              type: str
              description:
                EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                Supports Multiline strings

            structured_config:
              description: Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen
              type: any

        l3_interfaces:
          type: list
          elements: dict
          description: |-
            List of L3 interfaces
            This will create IP routed interface inside VRF. Length of interfaces, nodes and ip_addresses must match.

          options:
            interfaces:
              type: list
              elements: str
              description: Interface Name

            ip_addresses:
              type: list
              elements: str
              choices:
                - <IPv4_address/Mask>

            nodes:
              type: list
              elements: str
              description: Hostname of Node

            description:
              description: Interface Description
              type: str

            enabled:
              description: Enable or disable L3 interface
              type: bool
              default: false

            mtu:
              description: Interface MTU
              type: int

            raw_eos_cli:
              type: str
              description:
                EOS CLI rendered directly on the Ethernet interface in the final EOS configuration
                Supports Multiline strings

            structured_config:
              description: Custom structured config added under ethernet_interfaces.<interface> for eos_cli_config_gen
              type: any

            encapsulation_dot1q_vlan:
              type: list
              elements: int
              description: For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be specified.

        static_routes:
          type: list
          elements: dict
          description: |-
            This will create static routes inside the tenant VRF.
            If nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
            If a node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
            This automatic behavior can be overridden non-selectively with the redistribute_static knob for the VRF.
          options:
            destination_address_prefix:
              type: str
              required: true
              choices:
                - < IPv4_address/Mask >
            gateway:
              type: str
              choices:
                - < IPv4_address >
            distance:
              type: int
              choices:
                - < 1-255 >
            tag:
              type: int
              choices:
                - < 0-4294967295 >
            name:
              type: str
              description: Name/description for static route
            metric:
              type: int
              choices:
                - < 0-4294967295 >
            interface:
              type: str
            nodes:
              type: list
              elements: str
              description: Hostname of Node

        redistribute_static:
          type: bool
          description: Non-selectively enabling or disabling redistribute static inside the VRF

        bgp_peers:
          description:
            This will configure BGP neighbors inside the tenant VRF for peering with external devices.
            The configured peer will automatically be activated for ipv4 or ipv6 address family based on the ip address.
            Note, only ipv4 and ipv6 address families are currently supported in eos_designs.
            For other address families, use custom_structured configuration with eos_cli_config_gen.
          type: list
          elements: dict
          options:
            ip_address:
              type: str
              required: true
              unique: true
              choices:
                - < IPv4_address >
                - < IPv6_address >
            remote_as:
              type: int
              description: Remote ASN
            description:
              type: str
            password:
              type: str
              description: Encrypted password
            send_community:
              type: str
              choices:
                - standard
                - extended
                - large
                - all
            next_hop_self:
              type: bool
            maximum_routes:
              type: int
            default_originate:
              type: dict
              options:
                always:
                  type: bool
            update_source:
              type: str
              description: Interface name
            ebgp_multihop:
              type: int
              choices:
                - < 1-255 >
            nodes:
              type: list
              description: Nodes are required to restrict configuration of BGP neighbors to certain nodes in the network.
              elements: str
            
            set_ipv4_next_hop:
              type: str
              description:
                Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                Next hop takes precedence over route_map_out.
              choices:
               - < IPv4_address >
            set_ipv6_next_hop:
              type: str
              description:
                Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                Next hop takes precedence over route_map_out.
              choices:
               - < IPv6_address >
            route_map_out:
              type: str
              description: Route-map name
            route_map_in:
              type: st
              description: Route-map name
            local_as:
              type: int
            weight:
              type: int
              choices:
                - < 0-65535>

        bgp:
          type: dict
          options:
            raw_eos_cli:
              type: str
              description:
                EOS CLI rendered directly on the Router BGP, VRF definition in the final EOS configuration
                Supports Multiline strings

            structured_config:
              description: Custom structured config added under router_bgp.vrfs.<vrf> for eos_cli_config_gen
              type: any

        additional_route_targets:
          type: list
          elements: dict
          description: Optional configuration of extra route-targets for this VRF. Useful for route-leaking or gateway between address families.
          options:
            type:
              type: str
              choices:
                - import
                - export
            address_family:
              type: str
            route_target:
              type: str
            nodes:
              description: Nodes key is optional. Default is all nodes where the VRF is defined.
              type: list
              elements: str

        raw_eos_cli:
          type: str
          description:
            EOS CLI rendered directly on the root level of the final EOS configuration
            Supports Multiline strings

        structured_config:
          description: Custom structured config for eos_cli_config_gen
          type: any

    l2vlans:
      description: Define L2 network services organized by vlan id.
      type: list
      elements: dict
      options:
        id:
          type: int
          required: true
          unique: true
          description: VLAN id
          choices:
            - < 1-4096 >

        vni_override:
          type: int
          description: |-
            By default the vni will be derived from "mac_vrf_vni_base"
            The vni_override allows us to override this value and statically define it.
          choices:
            - < 1-16777215 >

        name:
          required: true
          type: str
          description: Vlan name

        tags:
          type: list
          elements: str
          required: true
          description: Tags leveraged for networks services filtering.

        vxlan:
          type: bool
          default: true
          description: Extend this L2VLAN over VXLAN

        igmp_snooping_enabled:
          type: bool
          description: Enable IGMP Snooping ("on" by default in EOS)
